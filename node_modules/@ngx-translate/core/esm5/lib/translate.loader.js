/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends } from "tslib";
import { Injectable } from "@angular/core";
import { of } from "rxjs";
/**
 * @abstract
 */
import * as ɵngcc0 from '@angular/core';
var /**
 * @abstract
 */
TranslateLoader = /** @class */ (function () {
    function TranslateLoader() {
    }
    return TranslateLoader;
}());
/**
 * @abstract
 */
export { TranslateLoader };
if (false) {
    /**
     * @abstract
     * @param {?} lang
     * @return {?}
     */
    TranslateLoader.prototype.getTranslation = function (lang) { };
}
/**
 * This loader is just a placeholder that does nothing, in case you don't need a loader at all
 */
var TranslateFakeLoader = /** @class */ (function (_super) {
    __extends(TranslateFakeLoader, _super);
    function TranslateFakeLoader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    TranslateFakeLoader.prototype.getTranslation = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        return of({});
    };
TranslateFakeLoader.ɵfac = /*@__PURE__*/ function () { var ɵTranslateFakeLoader_BaseFactory; return function TranslateFakeLoader_Factory(t) { return (ɵTranslateFakeLoader_BaseFactory || (ɵTranslateFakeLoader_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeLoader)))(t || TranslateFakeLoader); }; }();
TranslateFakeLoader.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TranslateFakeLoader, factory: function (t) { return TranslateFakeLoader.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateFakeLoader, [{
        type: Injectable
    }], null, null); })();
    return TranslateFakeLoader;
}(TranslateLoader));
export { TranslateFakeLoader };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLmxvYWRlci5qcyIsInNvdXJjZXMiOlsiQG5neC10cmFuc2xhdGUvY29yZS9saWIvdHJhbnNsYXRlLmxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFhLEVBQUUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNwQztBQUNHO0FBQWE7O0FBQWhCO0FBQVE7QUFBYTtBQUFJO0FBQ08sSUFEaEM7QUFBNkIsSUFFN0IsQ0FBQztBQUNELElBREEsc0JBQUM7QUFBRCxDQUFDLEFBRkQsSUFFQztBQUNEO0FBQ0c7QUFDUztBQUFJO0FBQTRCO0FBQWE7QUFBUTtBQUFpQjtBQUU1RTtBQUNLO0FBQVEsSUFQakIsK0RBQXVEO0FBQ3pEO0FBQ0E7QUFDRztBQUMyRjtBQUU5RjtBQUMrQyxJQUFOLHVDQUFlO0FBQUMsSUFEekQ7QUFDbUI7QUFDYyxJQUdqQyxDQUFDO0FBQ0Q7QUFBUTtBQUF1QjtBQUFtQjtBQUFRLElBSnhELDRDQUFjO0FBQU87QUFBdUI7QUFDL0I7QUFFZixJQUhFLFVBQWUsSUFBWTtBQUFJLFFBQzdCLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xCLElBQUUsQ0FBQzt1REFKRixVQUFVOzs7OzBCQUNMO0FBQUMsSUFJUCwwQkFBQztBQUNBLENBREEsQUFMRCxDQUN5QyxlQUFlLEdBSXZEO0FBQ0QsU0FMYSxtQkFBbUI7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7T2JzZXJ2YWJsZSwgb2Z9IGZyb20gXCJyeGpzXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUcmFuc2xhdGVMb2FkZXIge1xuICBhYnN0cmFjdCBnZXRUcmFuc2xhdGlvbihsYW5nOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT47XG59XG5cbi8qKlxuICogVGhpcyBsb2FkZXIgaXMganVzdCBhIHBsYWNlaG9sZGVyIHRoYXQgZG9lcyBub3RoaW5nLCBpbiBjYXNlIHlvdSBkb24ndCBuZWVkIGEgbG9hZGVyIGF0IGFsbFxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVHJhbnNsYXRlRmFrZUxvYWRlciBleHRlbmRzIFRyYW5zbGF0ZUxvYWRlciB7XG4gIGdldFRyYW5zbGF0aW9uKGxhbmc6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIG9mKHt9KTtcbiAgfVxufVxuIl19