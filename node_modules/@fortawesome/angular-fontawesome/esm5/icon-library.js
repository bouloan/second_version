import { __decorate, __read, __spread, __values } from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var FaIconLibrary = /** @class */ (function () {
    function FaIconLibrary() {
        this.definitions = {};
    }
    FaIconLibrary.prototype.addIcons = function () {
        var e_1, _a;
        var icons = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            icons[_i] = arguments[_i];
        }
        try {
            for (var icons_1 = __values(icons), icons_1_1 = icons_1.next(); !icons_1_1.done; icons_1_1 = icons_1.next()) {
                var icon = icons_1_1.value;
                if (!(icon.prefix in this.definitions)) {
                    this.definitions[icon.prefix] = {};
                }
                this.definitions[icon.prefix][icon.iconName] = icon;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (icons_1_1 && !icons_1_1.done && (_a = icons_1.return)) _a.call(icons_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    FaIconLibrary.prototype.addIconPacks = function () {
        var e_2, _a;
        var packs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            packs[_i] = arguments[_i];
        }
        var _loop_1 = function (pack) {
            var icons = Object.keys(pack).map(function (key) { return pack[key]; });
            this_1.addIcons.apply(this_1, __spread(icons));
        };
        var this_1 = this;
        try {
            for (var packs_1 = __values(packs), packs_1_1 = packs_1.next(); !packs_1_1.done; packs_1_1 = packs_1.next()) {
                var pack = packs_1_1.value;
                _loop_1(pack);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (packs_1_1 && !packs_1_1.done && (_a = packs_1.return)) _a.call(packs_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    FaIconLibrary.prototype.getIconDefinition = function (prefix, name) {
        if (prefix in this.definitions && name in this.definitions[prefix]) {
            return this.definitions[prefix][name];
        }
        return null;
    };
    FaIconLibrary.ɵprov = i0.ɵɵdefineInjectable({ factory: function FaIconLibrary_Factory() { return new FaIconLibrary(); }, token: FaIconLibrary, providedIn: "root" });
FaIconLibrary.ɵfac = function FaIconLibrary_Factory(t) { return new (t || FaIconLibrary)(); };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FaIconLibrary, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
    return FaIconLibrary;
}());
export { FaIconLibrary };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1saWJyYXJ5LmpzIiwic291cmNlcyI6WyJAZm9ydGF3ZXNvbWUvYW5ndWxhci1mb250YXdlc29tZS9pY29uLWxpYnJhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7O0FBU0E7QUFBaUQsSUFBakQ7QUFBMkIsUUFDakIsZ0JBQVcsR0FBNkQsRUFBRSxDQUFDO0FBQ3JGLEtBdUJDO0FBQ0QsSUF2QkUsZ0NBQVEsR0FBUjtBQUFjO0FBQXFCLFFBQTFCLGVBQTBCO0FBQUMsYUFBM0IsVUFBMEIsRUFBMUIscUJBQTBCLEVBQTFCLElBQTBCO0FBQ3JDLFlBRFcsMEJBQTBCO0FBQUM7QUFDL0I7QUFBYyxZQUFqQixLQUFtQixJQUFBLFVBQUEsU0FBQSxLQUFLLENBQUEsNEJBQUEsK0NBQUU7QUFDOUIsZ0JBRFMsSUFBTSxJQUFJLGtCQUFBO0FBQUUsZ0JBQ2YsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUU7QUFDOUMsb0JBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzNDLGlCQUFPO0FBQ1AsZ0JBQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztBQUMxRCxhQUFLO0FBQ0w7QUFFSztBQUNXO0FBQ2Q7QUFBa0I7QUFLWjtBQUFjO0FBQWtEO0FBQ3ZFLElBVkMsQ0FBQztBQUVILElBQUUsb0NBQVksR0FBWjtBQUFjO0FBQXFCLFFBQXRCLGVBQW9CO0FBQUMsYUFBckIsVUFBb0IsRUFBcEIscUJBQW9CLEVBQXBCLElBQW9CO0FBQ25DLFlBRGUsMEJBQW9CO0FBQUM7QUFDN0IsZ0NBQVEsSUFBSTtBQUFJLFlBQ2pCLElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFULENBQVMsQ0FBQyxDQUFDO0FBQzlELFlBQU0sT0FBSyxRQUFRLHdCQUFJLEtBQUssR0FBRTtBQUM5QjtBQUdBO0FBQTJCO0FBQWMsWUFOckMsS0FBbUIsSUFBQSxVQUFBLFNBQUEsS0FBSyxDQUFBLDRCQUFBO0FBQ2lCLGdCQURwQyxJQUFNLElBQUksa0JBQUE7QUFBRSx3QkFBTixJQUFJO0FBQUcsYUFHakI7QUFDTDtBQUVLO0FBQWtEO0FBQWtCO0FBQy9EO0FBQ21CO0FBQWM7QUFLeEI7QUFBVSxJQVQzQixDQUFDO0FBRUgsSUFBRSx5Q0FBaUIsR0FBakIsVUFBa0IsTUFBa0IsRUFBRSxJQUFjO0FBQUksUUFDdEQsSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUN4RSxZQUFNLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QyxTQUFLO0FBQ0wsUUFBSSxPQUFPLElBQUksQ0FBQztBQUNoQixJQUFFLENBQUM7QUFDRjtJQXpCWSxhQUFhLHdCQUR6QixVQUFVLENBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUMsUUFDdEI7Q0FBYSxDQXlCekI7OztnREFDRDtBQUFDLHdCQXBDRDtBQUFFLENBbUNELEFBekJELElBeUJDO0FBQ0QsU0ExQmEsYUFBYTtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWNvbkRlZmluaXRpb24sIEljb25OYW1lLCBJY29uUGFjaywgSWNvblByZWZpeCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1zdmctY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmFJY29uTGlicmFyeUludGVyZmFjZSB7XG4gIGFkZEljb25zKC4uLmljb25zOiBJY29uRGVmaW5pdGlvbltdKTogdm9pZDtcbiAgYWRkSWNvblBhY2tzKC4uLnBhY2tzOiBJY29uUGFja1tdKTogdm9pZDtcbiAgZ2V0SWNvbkRlZmluaXRpb24ocHJlZml4OiBJY29uUHJlZml4LCBuYW1lOiBJY29uTmFtZSk6IEljb25EZWZpbml0aW9uIHwgbnVsbDtcbn1cblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBGYUljb25MaWJyYXJ5IGltcGxlbWVudHMgRmFJY29uTGlicmFyeUludGVyZmFjZSB7XG4gIHByaXZhdGUgZGVmaW5pdGlvbnM6IHsgW3ByZWZpeDogc3RyaW5nXTogeyBbbmFtZTogc3RyaW5nXTogSWNvbkRlZmluaXRpb24gfSB9ID0ge307XG5cbiAgYWRkSWNvbnMoLi4uaWNvbnM6IEljb25EZWZpbml0aW9uW10pIHtcbiAgICBmb3IgKGNvbnN0IGljb24gb2YgaWNvbnMpIHtcbiAgICAgIGlmICghKGljb24ucHJlZml4IGluIHRoaXMuZGVmaW5pdGlvbnMpKSB7XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbnNbaWNvbi5wcmVmaXhdID0ge307XG4gICAgICB9XG4gICAgICB0aGlzLmRlZmluaXRpb25zW2ljb24ucHJlZml4XVtpY29uLmljb25OYW1lXSA9IGljb247XG4gICAgfVxuICB9XG5cbiAgYWRkSWNvblBhY2tzKC4uLnBhY2tzOiBJY29uUGFja1tdKSB7XG4gICAgZm9yIChjb25zdCBwYWNrIG9mIHBhY2tzKSB7XG4gICAgICBjb25zdCBpY29ucyA9IE9iamVjdC5rZXlzKHBhY2spLm1hcCgoa2V5KSA9PiBwYWNrW2tleV0pO1xuICAgICAgdGhpcy5hZGRJY29ucyguLi5pY29ucyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0SWNvbkRlZmluaXRpb24ocHJlZml4OiBJY29uUHJlZml4LCBuYW1lOiBJY29uTmFtZSk6IEljb25EZWZpbml0aW9uIHwgbnVsbCB7XG4gICAgaWYgKHByZWZpeCBpbiB0aGlzLmRlZmluaXRpb25zICYmIG5hbWUgaW4gdGhpcy5kZWZpbml0aW9uc1twcmVmaXhdKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWZpbml0aW9uc1twcmVmaXhdW25hbWVdO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIl19