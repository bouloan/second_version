import { __decorate } from "tslib";
import { Directive, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var FaStackItemSizeDirective = /** @class */ (function () {
    function FaStackItemSizeDirective() {
        /**
         * Specify whether icon inside {@link FaStackComponent} should be rendered in
         * regular size (1x) or as a larger icon (2x).
         */
        this.stackItemSize = '1x';
    }
    FaStackItemSizeDirective.prototype.ngOnChanges = function (changes) {
        if ('size' in changes) {
            throw new Error('fa-icon is not allowed to customize size when used inside fa-stack. ' +
                'Set size on the enclosing fa-stack instead: <fa-stack size="4x">...</fa-stack>.');
        }
    };
    __decorate([
        Input()
    ], FaStackItemSizeDirective.prototype, "stackItemSize", void 0);
    __decorate([
        Input()
    ], FaStackItemSizeDirective.prototype, "size", void 0);
FaStackItemSizeDirective.ɵfac = function FaStackItemSizeDirective_Factory(t) { return new (t || FaStackItemSizeDirective)(); };
FaStackItemSizeDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FaStackItemSizeDirective, selectors: [["fa-icon", "stackItemSize", ""], ["fa-duotone-icon", "stackItemSize", ""]], inputs: { stackItemSize: "stackItemSize", size: "size" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FaStackItemSizeDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'fa-icon[stackItemSize],fa-duotone-icon[stackItemSize]'
            }]
    }], function () { return []; }, { stackItemSize: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();
    return FaStackItemSizeDirective;
}());
export { FaStackItemSizeDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2staXRlbS1zaXplLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiQGZvcnRhd2Vzb21lL2FuZ3VsYXItZm9udGF3ZXNvbWUvc3RhY2svc3RhY2staXRlbS1zaXplLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQTRCLE1BQU0sZUFBZSxDQUFDOztBQVEzRTtBQUE0RCxJQUE1RDtBQUFzQyxRQUNwQztBQUNGO0FBQ007QUFFQSxXQUREO0FBQ0wsUUFBVyxrQkFBYSxHQUFnQixJQUFJLENBQUM7QUFDN0MsSUFjQSxDQUFDO0FBQ0QsSUFURSw4Q0FBVyxHQUFYLFVBQVksT0FBc0I7QUFDcEMsUUFBSSxJQUFJLE1BQU0sSUFBSSxPQUFPLEVBQUU7QUFDM0IsWUFBTSxNQUFNLElBQUksS0FBSyxDQUNiLHNFQUFzRTtBQUM5RSxnQkFBVSxpRkFBaUYsQ0FDcEYsQ0FBQztBQUNSLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDRixJQWZVO0FBQWEsUUFBckIsS0FBSyxFQUFFO0FBQUMsbUVBQWtDO0FBRTdDLElBR1c7QUFBYSxRQUFyQixLQUFLLEVBQUU7QUFBQywwREFBZ0I7SUFWZCx3QkFBd0Isd0JBSnBDLFNBQVMsQ0FBQyxjQUNULDhDQUE4QztPQUM5QyxRQUFRLEVBQUUsdURBQXVELFdBQ2xFLENBQUMsUUFDVyx3QkFBd0IsQ0FvQnBDOzs7Ozs7Ozs7OztvQkFDRDtBQUFDLElBREQsK0JBQUM7QUFDQSxDQURBLEFBcEJELElBb0JDO0FBQ0QsU0FyQmEsd0JBQXdCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNpemVQcm9wIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLXN2Zy1jb3JlJztcbmltcG9ydCB7IEZhU3RhY2tDb21wb25lbnQgfSBmcm9tICcuL3N0YWNrLmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnZmEtaWNvbltzdGFja0l0ZW1TaXplXSxmYS1kdW90b25lLWljb25bc3RhY2tJdGVtU2l6ZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBGYVN0YWNrSXRlbVNpemVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAvKipcbiAgICogU3BlY2lmeSB3aGV0aGVyIGljb24gaW5zaWRlIHtAbGluayBGYVN0YWNrQ29tcG9uZW50fSBzaG91bGQgYmUgcmVuZGVyZWQgaW5cbiAgICogcmVndWxhciBzaXplICgxeCkgb3IgYXMgYSBsYXJnZXIgaWNvbiAoMngpLlxuICAgKi9cbiAgQElucHV0KCkgc3RhY2tJdGVtU2l6ZTogJzF4JyB8ICcyeCcgPSAnMXgnO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIEBJbnB1dCgpIHNpemU/OiBTaXplUHJvcDtcblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKCdzaXplJyBpbiBjaGFuZ2VzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdmYS1pY29uIGlzIG5vdCBhbGxvd2VkIHRvIGN1c3RvbWl6ZSBzaXplIHdoZW4gdXNlZCBpbnNpZGUgZmEtc3RhY2suICcgK1xuICAgICAgICAgICdTZXQgc2l6ZSBvbiB0aGUgZW5jbG9zaW5nIGZhLXN0YWNrIGluc3RlYWQ6IDxmYS1zdGFjayBzaXplPVwiNHhcIj4uLi48L2ZhLXN0YWNrPi4nLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==